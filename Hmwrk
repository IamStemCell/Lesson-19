#Task1
#Create your own implementation of a built-in function enumerate, named `with_index`, which takes two parameters: `iterable` and `start`, default is 0. Tips: see the documentation for the enumerate function

 def with_index(iterable, start=0):
    index = start
    for item in iterable:
        yield index, item
        index += 1

#приклад 
fruits = ['soft', 'kitty', 'warm', 'fuzzy']
for index, fruit in with_index(fruits, start=1):
    print(f'{index}. {fruit}')

1. soft
2. kitty
3. warm
4. fuzzy


#Task2 
#Create your own implementation of a built-in function range, named in_range(), which takes three parameters: `start`, `end`, and optional step. Tips: See the documentation for `range` function


def in_range(start, end=None, step=1):
    if end is None:
        end = start
        start = 0
    result = []
    i = start
    while (step > 0 and i < end) or (step < 0 and i > end):
        result.append(i)
        i += step
    return result


#Task 3

#Create your own implementation of an iterable, which could be used inside for-in loop. Also, add logic for retrieving elements using square brackets syntax.

class MyIterable:
    def __init__(self, data):
        self.data = data
        self.index = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.index < len(self.data):
            result = self.data[self.index]
            self.index += 1
            return result
        else:
            raise StopIteration

    def __getitem__(self, key):
        return self.data[key]

my_iterable = MyIterable([5, 6, 7, 8, 9])

#Iterate over the items using for-in loop

for item in my_iterable:
    print(item)

# Output:
# 5
# 6
# 7
# 8
# 9

# Retrieve an item using square bracket syntax
print(my_iterable[2])  # Output: 7

